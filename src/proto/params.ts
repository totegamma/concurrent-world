// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: concord/badge/params.proto

/* eslint-disable */
import * as _m0 from 'protobufjs/minimal'

export const protobufPackage = 'concord.badge'

/** Params defines the parameters for the module. */
export interface Params {}

function createBaseParams(): Params {
    return {}
}

export const Params = {
    encode(_: Params, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
        return writer
    },

    decode(input: _m0.Reader | Uint8Array, length?: number): Params {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input)
        let end = length === undefined ? reader.len : reader.pos + length
        const message = createBaseParams()
        while (reader.pos < end) {
            const tag = reader.uint32()
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break
            }
            reader.skipType(tag & 7)
        }
        return message
    },

    fromJSON(_: any): Params {
        return {}
    },

    toJSON(_: Params): unknown {
        const obj: any = {}
        return obj
    },

    create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
        return Params.fromPartial(base ?? ({} as any))
    },
    fromPartial<I extends Exact<DeepPartial<Params>, I>>(_: I): Params {
        const message = createBaseParams()
        return message
    }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined

export type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
    ? ReadonlyArray<DeepPartial<U>>
    : T extends {}
    ? { [K in keyof T]?: DeepPartial<T[K]> }
    : Partial<T>

type KeysOfUnion<T> = T extends T ? keyof T : never
export type Exact<P, I extends P> = P extends Builtin
    ? P
    : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never }
